<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:sys="clr-namespace:System;assembly=mscorlib"
    xmlns:local="clr-namespace:ToggleButtonCustomControl">

    <sys:Boolean x:Key="True">True</sys:Boolean>
    <sys:Boolean x:Key="False">False</sys:Boolean>

    <!-- Switch colors and size etc -->
    <Style x:Key="ToggleButtonBase" TargetType="{x:Type Border}">
        <Setter Property="Height" Value="{Binding Height, RelativeSource={RelativeSource TemplatedParent}}"/>
        <Setter Property="Width" Value="{Binding Width, RelativeSource={RelativeSource TemplatedParent}}"/>
        <Setter Property="CornerRadius" Value="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}}"/>
        <Setter Property="BorderThickness" Value="{Binding BorderThickness, RelativeSource={RelativeSource TemplatedParent}}"/>
        <Setter Property="BorderBrush" Value="{Binding BorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>

        <Style.Triggers>
            <DataTrigger Binding="{Binding IsChecked, RelativeSource={RelativeSource TemplatedParent}}" Value="{StaticResource True}">
                <Setter Property="Background" Value="{Binding ColorOn, RelativeSource={RelativeSource TemplatedParent}}"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding IsChecked, RelativeSource={RelativeSource TemplatedParent}}" Value="{StaticResource False}">
                <Setter Property="Background" Value="{Binding ColorOff, RelativeSource={RelativeSource TemplatedParent}}"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>
    
    <!-- Switching the position of the toggle -->
    <Style x:Key="ToggleSwitchStyle" TargetType="{x:Type Border}">
        <Setter Property="CornerRadius" Value="{Binding CornerRadius, RelativeSource={RelativeSource TemplatedParent}}"/>
        <Setter Property="BorderBrush" Value="{Binding BorderBrush, RelativeSource={RelativeSource TemplatedParent}}"/>
        <Setter Property="Background" Value="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}"/>
        <Setter Property="HorizontalAlignment" Value="Left"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsChecked, RelativeSource={RelativeSource TemplatedParent}}" Value="{StaticResource True}">
                <Setter Property="HorizontalAlignment" Value="Right"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding IsChecked, RelativeSource={RelativeSource TemplatedParent}}" Value="{StaticResource False}">
                <Setter Property="HorizontalAlignment" Value="Left"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <!-- Switching position of the text (ON \ OFF) -->
    <Style x:Key="ButtonTextBlockStyle" TargetType="{x:Type TextBlock}">
        <Setter Property="HorizontalAlignment" Value="Center"/>
        <Setter Property="VerticalAlignment" Value="Center"/>
        <Setter Property="Grid.Column" Value="1"/>
        <Setter Property="FontSize" Value="{Binding FontSize, RelativeSource={RelativeSource TemplatedParent}}"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding IsChecked, RelativeSource={RelativeSource TemplatedParent}}" Value="{StaticResource True}">
                <Setter Property="Text" Value="{Binding LabelOn, RelativeSource={RelativeSource TemplatedParent}}"/>
                <Setter Property="Grid.Column" Value="0"/>
            </DataTrigger>

            <DataTrigger Binding="{Binding IsChecked, RelativeSource={RelativeSource TemplatedParent}}" Value="{StaticResource False}">
                <Setter Property="Text" Value="{Binding LabelOff, RelativeSource={RelativeSource TemplatedParent}}"/>
                <Setter Property="Grid.Column" Value="1"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style TargetType="{x:Type local:SimpleToggleButton}">
        <Setter Property="Height" Value="40"/>
        <Setter Property="Width" Value="120"/>
        <Setter Property="Background" Value="#F0F0FF"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:SimpleToggleButton}">
                    <Border Style="{StaticResource ToggleButtonBase}">
                        <Grid>
                            <!-- each column is the text's position -->
                            <Grid>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition />
                                    <ColumnDefinition />
                                </Grid.ColumnDefinitions>
                                <TextBlock Style="{StaticResource ButtonTextBlockStyle}"/>
                            </Grid>
                            <Border Width="{TemplateBinding SwitchWidth}" BorderThickness="1" Style="{StaticResource ToggleSwitchStyle}"/>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <!-- Blink animation -->
            <Trigger Property="IsChecked" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity">
                                <LinearDoubleKeyFrame KeyTime="0:0:0" Value="0"/>
                                <LinearDoubleKeyFrame KeyTime="0:0:0.2" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity">
                                <LinearDoubleKeyFrame KeyTime="0:0:0" Value="0"/>
                                <LinearDoubleKeyFrame KeyTime="0:0:0.2" Value="1"/>
                            </DoubleAnimationUsingKeyFrames>
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
            <!-- Shrinking animation -->
            <Trigger Property="IsMouseOver" Value="True">
                <Trigger.EnterActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ThicknessAnimation Duration="0:0:0.200" To="2" Storyboard.TargetProperty="BorderThickness" FillBehavior="HoldEnd"/>
                            <!--<DoubleAnimation Duration="0:0:0.150" By="10" Storyboard.TargetProperty="Height"/>-->
                            <!--<DoubleAnimation Duration="0:0:0.150" By="10" Storyboard.TargetProperty="Width"/>-->
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.EnterActions>
                <Trigger.ExitActions>
                    <BeginStoryboard>
                        <Storyboard>
                            <ThicknessAnimation Duration="0:0:0.10" To="0" Storyboard.TargetProperty="BorderThickness" FillBehavior="HoldEnd"/>
                            <!--<DoubleAnimation Duration="0:0:0.150" By="-10" Storyboard.TargetProperty="Height"/> -->
                            <!--<DoubleAnimation Duration="0:0:0.150" By="-10" Storyboard.TargetProperty="Width"/> -->
                            <!-- Doesn't work when you quickly move mouse over the button, since all insstances are different size I can't use from or to-->
                        </Storyboard>
                    </BeginStoryboard>
                </Trigger.ExitActions>
            </Trigger>
        </Style.Triggers>
    </Style>
</ResourceDictionary>
